from __future__ import division
import math
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt
import scipy.integrate
import sys
import decimal
import matplotlib.cm as cm
from mpl_toolkits.mplot3d import Axes3D
import operator
import os
from gen_control_function import gen_control_function
make_graph = 'no'
calc_res = 'no'
inc_L = 'yes'

### reading matrices and making 3D plot
#import matplotlib.pyplot as plt
#from mpl_toolkits.mplot3d import axes3d, Axes3D
#fig = plt.figure()
#ax = Axes3D(fig)

#X = np.loadtxt('cylinder_kpL.out')
#Y = np.loadtxt('cylinder_g.out')
#X_graph,Y_graph = np.meshgrid(X,Y)
#Z = np.loadtxt(open('cylinder_W_S_over_L.out','rb'),delimiter=',')

#from matplotlib import cm
#ax.plot_surface(X_graph,Y_graph,Z,rstride=1,cstride=1,cmap=cm.coolwarm)

#ax.set_xlabel('k_p*L')
#ax.set_ylabel('R/H')
#ax.set_zlabel('W_S/L')

#plt.show()

#sys.exit()

### constants
rho = 1000
g = 9.81
pi = 3.14

### wave/sea conditions
H_s = 1
T_p = 10
k_p = 4*pi**2/(g*T_p**2)
lambda_p = 2*pi/k_p
omega_p = 2*pi/T_p
N_beta = 1
frequencies = np.linspace(0.08,0.8,99).tolist()

Spectrum = lambda w: (1.25/4)*(omega_p**4/w**5)*(H_s**2)*math.exp((-1.25*((omega_p/w)**4)))
Spectrum_star = lambda w: (1.25/4)*(1/(w**5))*math.exp(-1.25*(1/w)**4)

L_panel_factor = 8
L_lower_bound = 18
L_upper_bound = 40
N_L = 10
L_list = np.linspace(L_lower_bound,L_upper_bound, N_L)
k_pL = [k_p*l for l in L_list]

g_RH_list = np.linspace(1,5,4)

all_W_S_over_L_list = []
all_g_list = []
all_L_list = []



for g_RH in g_RH_list:

    g_W_S_over_L_list = []
    Script_P_list = []

    for L in L_list:

        R = L*((g_RH/pi)**(1/3))
        H = R/g_RH

        n = 2
        kinks = 1

        [r1,r2,r3] = [R,0,0]
        [z1,z2,z3] = [-H,0,0]
        [r_1_extra_coeffs,z_1_extra_coeffs,r_2_extra_coeffs,z_2_extra_coeffs,r_3_extra_coeffs,z_3_extra_coeffs,r_4_extra_coeffs,z_4_extra_coeffs] = [[0],[0],[0],[0],[0],[0],[0],[0]]
### if kinks > 0, need to specify r1 and z1 (etc). if n > 2, need to specify r_1_extra_coeffs (etc if kinks > 0)

        from make_all_coeffs import make_all_coeffs
        r_1_coeffs,r_2_coeffs,r_3_coeffs,r_4_coeffs,z_1_coeffs,z_2_coeffs,z_3_coeffs,z_4_coeffs = make_all_coeffs(kinks,n,R,H,r1,r2,r3,z1,z2,z3,r_1_extra_coeffs,z_1_extra_coeffs,r_2_extra_coeffs,z_2_extra_coeffs,r_3_extra_coeffs,z_3_extra_coeffs,r_4_extra_coeffs,z_4_extra_coeffs)

############# GET CAPTURE WIDTH ##################

        W_S_over_L,Script_P = gen_control_function(make_graph,H_s,T_p,N_beta,Spectrum,Spectrum_star,L_panel_factor,L,n,kinks,R,H,r_1_coeffs,r_2_coeffs,r_3_coeffs,r_4_coeffs,z_1_coeffs,z_2_coeffs,z_3_coeffs,z_4_coeffs,frequencies,calc_res,inc_L)

        all_W_S_over_L_list.append(W_S_over_L)
        g_W_S_over_L_list.append(W_S_over_L)
        all_L_list.append(L)
        all_g_list.append(g_RH)

        Script_P_list.append(Script_P)
    
########### PLOTTING #######################

    #plt.plot(k_pL,g_W_S_over_L_list,label='R/H = %.1f'%g_RH)
    plt.plot(k_pL,Script_P_list,label='R/H = %.1f'%g_RH)

plt.xlabel('k_p*L',fontsize=20)
#plt.ylabel('W_S/L',fontsize=20)
plt.ylabel('P*')

#plt.legend(fontsize=20)

#plt.tick_params(axis='both', which='major', labelsize=20)
#plt.tick_params(axis='both', which='minor', labelsize=20)


plt.show()
plt.close()

######### DETERMINING OPTIMAL  ########

import operator
ind, val = max(enumerate(all_W_S_over_L_list),key=operator.itemgetter(1))

L_opt = all_L_list[ind]
g_opt = all_g_list[ind]
W_S_opt = all_W_S_over_L_list[ind]

##### Change to 2D arrays for 3D ploting #######

import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import axes3d, Axes3D
fig = plt.figure()
ax = Axes3D(fig)

k_pL_list = [k_p*l for l in L_list]

X = np.array(k_pL_list)
Y = np.array(g_RH_list)
X_graph,Y_graph = np.meshgrid(X,Y)
Z = np.array(all_W_S_over_L_list).reshape(len(g_RH_list),len(L_list))

from matplotlib import cm
ax.plot_surface(X_graph,Y_graph,Z,rstride=1,cstride=1,cmap=cm.coolwarm)

ax.set_xlabel('k_p*L')
ax.set_ylabel('R/H')
ax.set_zlabel('W_S/L')

#### WRITE TO FILE #####
#np.savetxt('cylinder_kpL.out',X,delimiter=',')
#np.savetxt('cylinder_g.out',Y,delimiter=',')
#np.savetxt('cylinder_W_S_over_L.out',Z,delimiter=',')

### save figure

#plt.savefig('cylinder_e_and_e.png')


